from __future__ import division
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from PIL import Image
import os
from datetime import datetime
import sys

caffe_root = '/home/yuboz/caffe_basl/caffe'  # this file should be run from {caffe_root}/examples (otherwise change this line)
sys.path.insert(0, caffe_root + '/python')
import caffe


def F1_measure(test_net, save_dir,txt_dir, dataset, layer, data,gt,iteration):
    #solver.test_nets[0].share_with(solver.net)
    result = do_measure(test_net, save_dir,txt_dir, dataset, layer, data,gt,iteration)
    return result

def do_measure(net, save_dir,txt_dir, dataset, layer, data,gt,iteration):
    n_cl = net.blobs[layer].channels

    if save_dir:
        if not (os.path.exists(save_dir)):
            os.mkdir(save_dir)
    hist = np.zeros((n_cl, n_cl))
    t_l = 0
    t = 0
    l = 0
    if txt_dir:
    	txt_file = open(txt_dir,'a')
    total = 0
    for idx in range(dataset):
        t_l = 0
        t = 0
        l = 0
        net.forward()
        output = net.blobs[layer].data[0].astype(np.float64)        
    	output1 = output[1];
        outputhhh = net.blobs['loss2'].data[0].astype(np.float64)
        print outputhhh
        output2 = np.ndarray.astype(output1*150, np.uint8)
        gt_output1 = net.blobs[gt].data[0]
        gt_output = np.ndarray.astype(gt_output1,np.uint8)
        data_output1 = net.blobs[data].data[0]
        data_output = np.ndarray.astype(data_output1,np.uint8)
        #print data_output.shape
        show = np.zeros((380,1030,3),np.uint8)
        for i in range(380):
            for j in range(1030):
                if data_output[2][i][j]+output2[i][j]<data_output[2][i][j]:
                    show[i,j,0] = 255;
                else:
                    show[i,j,0] = data_output[2][i][j]+output2[i][j]
        #show[:,:,0] = gt_output[2]
        show[:,:,1] = data_output[1]
        show[:,:,2] = data_output[0]
        l = gt_output.sum()
        t = (output1>0.5).sum()
        t_l = ((gt_output > 0) & (output1 > 0.5)).sum()
        if l == 0:
            print "there is no label ==1 in image"
            continue
        if t == 0:
            print "there is no detection ==1 in image"
            continue
        r = float(t_l)/float(l)
        p = float(t_l)/float(t)
        if r+p == 0:
            print "recall+precision ==0"
            continue
        F1 = 2*r*p/(r+p)
        total+=F1        

        if save_dir:
        	im = Image.fromarray(show,'RGB')
        	im.save(os.path.join(save_dir, str(idx) + '_' + str(iteration) + '.png'))

    if txt_dir:
        txt_file.write(str(total/(idx+1)))
        txt_file.write("\n")
        txt_file.close()





