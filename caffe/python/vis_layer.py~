import sys
caffe_root = '/home/yuboz/caffe_det/caffe'
sys.path.insert(0, caffe_root+ '/python')
import caffe
import numpy as np
import os
import matplotlib.pyplot as plt
# display plots in this notebook
import sys
import matplotlib.image as mpimg
from PIL import Image

# set display defaults
plt.rcParams['figure.figsize'] = (10, 10)        # large images
plt.rcParams['image.interpolation'] = 'nearest'  # don't interpolate: show square pixels
plt.rcParams['image.cmap'] = 'gray'  # use grayscale output rather than a (potentially misleading) color heatmap


def vis_square(data):
    """Take an array of shape (n, height, width) or (n, height, width, 3)
       and visualize each (height, width) thing in a grid of size approx. sqrt(n) by sqrt(n)"""
    
    # normalize data for display
    data = (data - data.min()) / (data.max() - data.min())
    
    # force the number of filters to be square
    n = int(np.ceil(np.sqrt(data.shape[0])))
    padding = (((0, n ** 2 - data.shape[0]),
               (0, 1), (0, 1))                 # add some space between filters
               + ((0, 0),) * (data.ndim - 3))  # don't pad the last dimension (if there is one)
    data = np.pad(data, padding, mode='constant', constant_values=1)  # pad with ones (white)
    
    # tile the filters into an image
    data = data.reshape((n, n) + data.shape[1:]).transpose((0, 2, 1, 3) + tuple(range(4, data.ndim + 1)))
    data = data.reshape((n * data.shape[1], n * data.shape[3]) + data.shape[4:])
    show = np.array(data,dtype = np.uint8)
    img = Image.fromarray(show)
    img.show()
    plt.imshow(data)


#model_def = '/home/yuboz/caffe_det/caffe/models/hand1/VGG_VOC2012test.prototxt'
model_def = '/home/yuboz/Downloads/deploy.prototxt'
#model_weights = '/home/yuboz/caffe_det/caffe/models/hand1/'+sys.argv[1]
model_weights = '/home/yuboz/Downloads/'+sys.argv[1]
net = caffe.Net(model_def,      # defines the structure of the model
                model_weights,  # contains the trained weights
                caffe.TEST)     # use test mode (e.g., don't perform dropout)
filters = net.params['conv1'][0].data
print filters

vis_square(filters.transpose(0, 2, 3, 1))
